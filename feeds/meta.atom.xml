<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>textbook - meta</title><link href="https://blog.jonrshar.pe/" rel="alternate"></link><link href="https://blog.jonrshar.pe/feeds/meta.atom.xml" rel="self"></link><id>https://blog.jonrshar.pe/</id><updated>2016-12-04T12:00:00+00:00</updated><subtitle>These are my opinions - if you don't like them, I have others</subtitle><entry><title>Meta recursion: meta-post about meta-tags</title><link href="https://blog.jonrshar.pe/2016/Dec/04/meta-meta-tags.html" rel="alternate"></link><published>2016-12-04T12:00:00+00:00</published><updated>2016-12-04T12:00:00+00:00</updated><author><name>Jonathan Sharpe</name></author><id>tag:blog.jonrshar.pe,2016-12-04:/2016/Dec/04/meta-meta-tags.html</id><summary type="html">&lt;p&gt;Integrating OpenGraph/Twitter meta-tags into a Pelican blog theme.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Social media networks like Twitter, Facebook and LinkedIn support the use of
&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags in your HTML to provide additional information when displaying
links to websites. Facebook and LinkedIn use &lt;a href="http://ogp.me/"&gt;OpenGraph&lt;/a&gt; tags; Twitter 
accepts some OpenGraph tags plus &lt;a href="https://dev.twitter.com/cards/markup"&gt;a few of its own&lt;/a&gt;. Providing these tags
allows you some customisation of how your pages are displayed when people share
links to them through these networks.&lt;/p&gt;
&lt;p&gt;I've recently added suport for these tags into &lt;a href="https://github.com/textbook/bulrush"&gt;Bulrush&lt;/a&gt;, the theme currently
used on this blog. What this means is that if you drop the link to one of my
articles, e.g. &lt;code&gt;http://blog.jonrshar.pe/2015/Jul/06/context-manager-case.html&lt;/code&gt;,
into &lt;a href="https://cards-dev.twitter.com/validator"&gt;the Twitter Cards validator&lt;/a&gt;, you will see something like the
following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Twitter Cards Preview" src="https://blog.jonrshar.pe/images/twitter-card-preview.png"&gt;&lt;/p&gt;
&lt;p&gt;You may wonder how this is implemented. I'm using &lt;a href="http://jinja.pocoo.org/docs/dev/templates/#template-inheritance"&gt;template inheritance&lt;/a&gt;,
provided by the Jinja2 template engine, to allow child templates to override
their parents via &lt;code&gt;block&lt;/code&gt; and &lt;code&gt;extends&lt;/code&gt; elements, and &lt;a href="http://jinja.pocoo.org/docs/dev/templates/#include"&gt;the &lt;code&gt;include&lt;/code&gt;
statement&lt;/a&gt; to bring in the defined tags.&lt;/p&gt;
&lt;p&gt;There's a single file representing the meta tags (&lt;code&gt;meta_tags.html&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:title&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITENAME }}{% if item.title %} - {{ item.title }}{% endif %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% if item.summary %}
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:description&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ item.summary | striptags | truncate(200, end=&amp;#39;...&amp;#39;) }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:url&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/{{ item.url }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% if AVATAR %}
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:image&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/images/{{ AVATAR }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;twitter:image:alt&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITENAME }}{% if SITESUBTITLE %} | {{ SITESUBTITLE }}{% endif %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;twitter:card&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% if TWITTER_USERNAME %}
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;twitter:creator&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@{{ TWITTER_USERNAME }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;twitter:site&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@{{ TWITTER_USERNAME }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some of the interpolated variables, like &lt;code&gt;SITENAME&lt;/code&gt;, are set in the root
&lt;code&gt;pelicanconf.py&lt;/code&gt; and made available everywhere in the templates. The &lt;a href="http://jinja.pocoo.org/docs/dev/extensions/#with-statement"&gt;&lt;code&gt;with&lt;/code&gt;
statement extension&lt;/a&gt; allows the &lt;code&gt;item&lt;/code&gt; to be injected from the template
displaying the specific item I want to be tagged when they &lt;code&gt;include&lt;/code&gt; the 
sub-template, e.g. for the articles (see &lt;code&gt;article.html&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{% block tags %}
  {% with item=article %}
    {% include &amp;#39;meta_tags.html&amp;#39; %}
  {% endwith %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;the &lt;code&gt;item&lt;/code&gt; is the &lt;a href="http://docs.getpelican.com/en/3.6.3/themes.html#article"&gt;&lt;code&gt;article&lt;/code&gt; object&lt;/a&gt;. Similarly, for generic pages like the
About page, the injected &lt;code&gt;item&lt;/code&gt; is the &lt;a href="http://docs.getpelican.com/en/3.6.3/themes.html#page"&gt;&lt;code&gt;page&lt;/code&gt; object&lt;/a&gt;. These both have
similar properties, like &lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt;, so it's easy to plug
either of these into the general tag layout. &lt;code&gt;{% block tags %}&lt;/code&gt; simply means
that the rendered markup will "fill in" the defined block from a parent
template, in this case in &lt;code&gt;base.html&lt;/code&gt;'s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Hopefully this demonstrates how useful the template inheritance functionality of
Jinja can be. You can see &lt;a href="https://github.com/textbook/bulrush/commit/78579cb3dba20c52a7f12f98a4e3cfbe2bbac051"&gt;the full commit&lt;/a&gt; on GitHub; it took under 30
lines of HTML to add automatically-generated meta-tags to the relevant pages.
If you're using Pelican to generate your blog, feel free to give Bulrush a try
and let me know what you think. Alternatively, you can use the above ideas to
add similar functionality to your own Pelican theme, or any other Jinja2-based
site.&lt;/p&gt;</content><category term="meta"></category><category term="pelican"></category><category term="code"></category></entry><entry><title>(Not) Much Ado About Nothing</title><link href="https://blog.jonrshar.pe/2015/Nov/21/not-much-ado-about-nothing.html" rel="alternate"></link><published>2015-11-21T13:00:00+00:00</published><updated>2015-11-21T13:00:00+00:00</updated><author><name>Jonathan Sharpe</name></author><id>tag:blog.jonrshar.pe,2015-11-21:/2015/Nov/21/not-much-ado-about-nothing.html</id><summary type="html">&lt;p&gt;Why did I start this blog, again?&lt;/p&gt;</summary><content type="html">&lt;p&gt;My last post to this blog was on the 15th of August, which &lt;code&gt;datetime&lt;/code&gt; has just
informed me is exactly 14 weeks ago:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;
&lt;span class="mf"&gt;14.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might assume, therefore, that nothing of note has happened in those weeks,
but that would not be accurate. The day before writing the post, I'd been to the
first part of the interview process for &lt;a href="http://pivotal.io/labs"&gt;Pivotal Labs&lt;/a&gt; in London, as
an eventual result of which I'm sat here between leaving TRL and starting my new
job as a Senior Software Engineer.&lt;/p&gt;
&lt;p&gt;Frankly, I'm rarely sure what to write &lt;em&gt;about&lt;/em&gt;. I've written a couple of posts
on the process of building this blog, which was an interesting process in
itself (to me, at least), but now that it's stable what do I go on to write on
it?&lt;/p&gt;
&lt;p&gt;So, in an attempt to kick myself into doing it, here are plans for a couple of
future posts that I'll try to write over the next few weeks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gig review (Tom Williams at London Fields Brewery, 2015/11/18);&lt;/li&gt;
&lt;li&gt;What Pivotal's hiring process was like;&lt;/li&gt;
&lt;li&gt;Why I'm excited to be starting at Pivotal (hopefully &lt;em&gt;before&lt;/em&gt; starting); and&lt;/li&gt;
&lt;li&gt;What starting at Pivotal was actually like (inevitably &lt;em&gt;after&lt;/em&gt; starting).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps living in London during the week will provide more interesting fodder
for this than living in Bracknell has, but we'll see!&lt;/p&gt;</content><category term="meta"></category><category term="blogging"></category><category term="writing"></category></entry><entry><title>Setting up a Travis build</title><link href="https://blog.jonrshar.pe/2015/Aug/07/build-automagic.html" rel="alternate"></link><published>2015-08-07T22:13:00+01:00</published><updated>2015-08-07T22:13:00+01:00</updated><author><name>Jonathan Sharpe</name></author><id>tag:blog.jonrshar.pe,2015-08-07:/2015/Aug/07/build-automagic.html</id><summary type="html">&lt;p&gt;Making my own life easier, one shell script at a time&lt;/p&gt;</summary><content type="html">&lt;p&gt;The one downside of using Pelican to build the site, as opposed to the Tumblr 
blog I was previously using, is that I have to &lt;em&gt;actually build the site&lt;/em&gt;. This
means that I need to have software installed to write a new article which, 
while not really a huge problem, is slightly awkward. However, I'd read a few 
things about using online automated build/continuous integration services to 
build the site for me when I push to the source repo. This means I can write a 
new article on GitHub [&lt;em&gt;Ed&lt;/em&gt;: it was right around this point that I thought &lt;em&gt;"oh 
yeah, I &lt;strong&gt;can&lt;/strong&gt; write this on GitHub!"&lt;/em&gt;, and did so], and can therefore write
from pretty much anywhere.&lt;/p&gt;
&lt;p&gt;So, I read a couple of posts about it, specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zonca.github.io/2013/09/automatically-build-pelican-and-publish-to-github-pages.html"&gt;How to automatically build your Pelican blog and publish it to Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.mathieu-leplatre.info/publish-your-pelican-blog-on-github-pages-via-travis-ci.html"&gt;Publish your Pelican blog on Github pages via Travis-CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kevinyap.ca/2014/06/deploying-pelican-sites-using-travis-ci/"&gt;Deploying Pelican Sites Using Travis CI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I particularly liked this approach as some of the other posts I read use 
&lt;code&gt;ghp-import&lt;/code&gt; and it seemed unnecessary to add a new dependency to the project 
when &lt;code&gt;git&lt;/code&gt; provides the tools for pretty much everything that I want. Initially
I implemented it more-or-less as-is, using &lt;code&gt;rsync&lt;/code&gt; to copy the changes from the
output folder to a fresh checkout of the deployment repo.&lt;/p&gt;
&lt;p&gt;Once I had that working, I had a bit of a rethink. I figured that there might be 
something cleverer that I could do based on the structure I'm using; because the 
&lt;code&gt;output&lt;/code&gt; folder is a submodule, it is already linked to the correct repo for 
publishing. The first problem I had is that, as I'm not now separately checking 
out the site repo, I'm relying on Travis's checkout. That isn't authenticated for
pushing, and a bit of research suggested that it isn't possible to modify the 
clone process, but you can add the correct origin back manually. Based on &lt;a href="http://stackoverflow.com/q/19845679/3001761"&gt;this 
(criminally underrated) SO post&lt;/a&gt;, I added the following to &lt;code&gt;deploy.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:::shell
git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;origin
git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;https://&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;GH_PAGES&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;@github.com/&lt;span class="nv"&gt;$TARGET_REPO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This caused my second problem, that I was now pushing to a detached &lt;code&gt;HEAD&lt;/code&gt;, so
the changes weren't actually ending up in the &lt;code&gt;master&lt;/code&gt; branch. To fix this took
&lt;a href="http://stackoverflow.com/q/5772192/3001761"&gt;another SO question&lt;/a&gt;, which suggested committing to a temporary branch, 
committing the changes then switching that back into &lt;code&gt;master&lt;/code&gt; before the push,
so I added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:::shell
git checkout -b temp
...
git checkout -B master temp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that did it! I'm planning to set this all up as a neat Pelican starter 
project that anyone can easily fork, so keep an eye out for that if you're 
interested in setting up your own Pelican site with minimal fuss.&lt;/p&gt;</content><category term="meta"></category><category term="code"></category><category term="travis"></category><category term="pelican"></category></entry><entry><title>Switching Meadowlark to Less CSS</title><link href="https://blog.jonrshar.pe/2015/Aug/03/much-less-css.html" rel="alternate"></link><published>2015-08-03T22:00:00+01:00</published><updated>2015-08-03T22:00:00+01:00</updated><author><name>Jonathan Sharpe</name></author><id>tag:blog.jonrshar.pe,2015-08-03:/2015/Aug/03/much-less-css.html</id><summary type="html">&lt;p&gt;In which I faff around with webassets and reduce duplication&lt;/p&gt;</summary><content type="html">&lt;p&gt;As &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt;, the primary IDE I'm using to develop and maintain this site, uses
&lt;a href="http://lesscss.org/"&gt;Less CSS&lt;/a&gt; in its stylesheets, I thought I'd adopt it to reduce the style
duplication in the site's Meadowlark theme. However, this did not turn out to
be as easy as initially anticipated, so I thought I'd write down the steps in
case it helps someone else.&lt;/p&gt;
&lt;p&gt;First, an introduction: Less is one of a number of CSS preprocessors that has
popped up to address some of the features lacking in vanilla CSS, such as
defining variables and nesting styles. This allows the reduction of duplication,
while still providing backwards compatibility and not giving the browser yet
another task to do before the user gets to see the page they asked for.&lt;/p&gt;
&lt;p&gt;In case it took longer than expected to switch to Less I created a &lt;code&gt;less&lt;/code&gt;
branch in Git for both the root website repo and the &lt;code&gt;meadowlark&lt;/code&gt; submodule. I'd
already installed &lt;a href="https://webassets.readthedocs.org/en/latest/"&gt;webassets&lt;/a&gt; (&lt;code&gt;pip install webassets&lt;/code&gt;), which &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; can use
to handle Less and other, similar tools (JavaScript minifiers, alternative CSS
preprocessors, &lt;em&gt;et al.&lt;/em&gt;), and Less itself (&lt;code&gt;npm install -g less&lt;/code&gt;), but I still
needed to ensure that Pelican and &lt;a href="http://jinja.pocoo.org/"&gt;Jinja&lt;/a&gt; had the appropriate extension
installed. This entailed adding another Git submodule to the project, the
&lt;a href="https://github.com/getpelican/pelican-plugins.git"&gt;&lt;code&gt;pelican-plugins&lt;/code&gt; repository&lt;/a&gt;, to get access to the &lt;code&gt;assets&lt;/code&gt; plugin.
Then I added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:::python
PLUGIN_PATHS = [&amp;#39;pelican-plugins&amp;#39;]
PLUGINS = [&amp;#39;assets&amp;#39;]
JINJA_EXTENSIONS = [&amp;#39;webassets.ext.jinja2.AssetsExtension&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to the &lt;code&gt;pelicanconf.py&lt;/code&gt;. This enables use of the &lt;code&gt;{% assets %}&lt;/code&gt; statement in
templates, which will be used to process the &lt;code&gt;.less&lt;/code&gt; files to &lt;code&gt;.css&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;:::html&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;assets&lt;/span&gt; &lt;span class="nv"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;less&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;css/main.css&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;css/main.less&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ASSET_URL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endassets&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This tells Jinja to take the &lt;code&gt;main.less&lt;/code&gt; file, run it through the &lt;code&gt;less&lt;/code&gt; filter,
save it as &lt;code&gt;main.css&lt;/code&gt; and use it in the template. Initially I started by
simply renaming the former &lt;code&gt;main.css&lt;/code&gt;, but once the process was working I was
able to start using Less's syntax to rearrange it; leaving, crucially, one
single, canonical definition of the three main site colours.&lt;/p&gt;
&lt;p&gt;So that's &lt;em&gt;one&lt;/em&gt; of the &lt;a href="https://blog.jonrshar.pe/2015/Jul/11/meta-meadowlark.html"&gt;things I claimed I would do&lt;/a&gt; ticked off, which
isn't bad going!&lt;/p&gt;</content><category term="meta"></category><category term="code"></category><category term="pelican"></category><category term="css"></category></entry><entry><title>Creating a blog in Pelican</title><link href="https://blog.jonrshar.pe/2015/Jul/11/meta-meadowlark.html" rel="alternate"></link><published>2015-07-11T16:00:00+01:00</published><updated>2015-07-11T16:00:00+01:00</updated><author><name>Jonathan Sharpe</name></author><id>tag:blog.jonrshar.pe,2015-07-11:/2015/Jul/11/meta-meadowlark.html</id><summary type="html">&lt;p&gt;The one you're reading right now, in fact!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome to version 1.0 of my new blog site! I thought I'd start with a bit
of a meta-post about the creating of the blog and its current &lt;code&gt;meadowlark&lt;/code&gt;
theme. A few particular comments on the process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The combination of a static site generator like Pelican and simple hosting
 like GitHub pages does make it very easy to get a site up and running - I have
 the source hosted in one repository, set to ignore the &lt;code&gt;output&lt;/code&gt; directory,
 then the actual site in &lt;code&gt;output&lt;/code&gt; in a second repo, a push on the latter and
 the live site is updated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub's &lt;a href="http://atom.io/"&gt;Atom IDE&lt;/a&gt; is perfect for this level of project - I really
 like JetBrains' &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; for projects with more substantial development, but it
 can be a little heavy for smaller projects like these, and the fact that Atom
 is based on &lt;a href="http://lesscss.org/"&gt;Less CSS&lt;/a&gt; gives me another technology to learn; and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I really do not get CSS yet - the easiest way for me to develop is way closer
 to trial and error than I'd like! Also: IE support is tricky, so I haven't
 bothered, and &lt;a href="http://wernull.com/2013/04/debug-ghost-css-elements-causing-unwanted-scrolling/"&gt;GhostCSS&lt;/a&gt; is a very handy tool for unbreaking my own
 errors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what's next? I have the following vague ambitions for improvements in the
coming weeks/months (&lt;em&gt;note to self: revise this to reflect whenever I get them
done!&lt;/em&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I really like the way Campo Santo's website changes colour as you sit and
 watch it - I'm thinking of using the colour to reflect the time of year/day
 (e.g. split into spring/summer/autumn/winter and morning/afternoon/evening/night
 and having a suitable colour gradient for each one);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rethink the code block theme - I've currently just taken the basic IDLE theme
 (the IDE that comes built-in with Python), it might be nice to do something
 a bit better matched with the rest of the site theme; and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switch the theming to Less CSS (see above), which will hopefully also make the
 above tasks easier.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="meta"></category><category term="code"></category><category term="python"></category><category term="pelican"></category></entry></feed>